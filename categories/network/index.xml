<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Network on 东冬の乱记</title>
    <link>https://donge.org/categories/network/</link>
    <description>Recent content in Network on 东冬の乱记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 19 Jul 2011 00:17:38 +0000</lastBuildDate><atom:link href="https://donge.org/categories/network/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>精读TRILL协议</title>
      <link>https://donge.org/posts/%E7%B2%BE%E8%AF%BBtrill%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Tue, 19 Jul 2011 00:17:38 +0000</pubDate>
      
      <guid>https://donge.org/posts/%E7%B2%BE%E8%AF%BBtrill%E5%8D%8F%E8%AE%AE/</guid>
      
        <description>精读TRILL协议
**4.4 TRILL-Hello协议 **http://donge.org/?page_id=9231
**4.5 分发树 **http://donge.org/?page_id=9250</description>
      
    </item>
    
    <item>
      <title>[亲笔]安装开源路由平台Quagga记</title>
      <link>https://donge.org/posts/%E5%AE%89%E8%A3%85%E5%BC%80%E6%BA%90%E8%B7%AF%E7%94%B1%E5%B9%B3%E5%8F%B0quagga%E8%AE%B0/</link>
      <pubDate>Sun, 19 Jun 2011 21:23:00 +0000</pubDate>
      
      <guid>https://donge.org/posts/%E5%AE%89%E8%A3%85%E5%BC%80%E6%BA%90%E8%B7%AF%E7%94%B1%E5%B9%B3%E5%8F%B0quagga%E8%AE%B0/</guid>
      
        <description>周末闲来无聊，准备学习一下Linux知识，索性想起了开源的路由系统Quagga，Quagga是为数不多的开源路由系统，源自Zebra（Zebra是斑马，Quagga是野驴，猜想也是一路的），Zebra大家可能还有人用过，不过早在N年前就没人维护了，Quagga支持主流的路由协议包括RIP, OSPF, ISIS, BGP等等，支持TE，支持IPv6，对于学习路由完全足够了，命令行界面克隆Cisco。当前Quagga最新版本是0.99.18。可以前往http://www.quagga.net/获得。
1. 安装编译运行系统 由于电脑是Windows，所以需要安装一个Linux编译环境，选择了DeepinLinux，一款国产优秀的面向桌面的Linux发行版，Ubuntu分支，轻量级界面还很漂亮。可以前往http://www.deepinlinux.com获得。由于平时无法脱离Windows，所以安装到虚拟机中，VMWare, VisualBox, WMLite随你选了，废话不说，这个过程略了。
2. 配置Linux环境 GCC编译环境，make，autoconf，essential-lib，git都不能少啊，我不是Linux铁粉，所以都用apt-get搞定，少什么加什么，不行就google。当然在Windows使用Linux，可以配置好SSH，在Windows下访问，Linux虚拟机后台运行命令行即可。
3. 获得Quagga代码分支 可以从网站下载源码包，当然如果有网络的话，可以直接git。 git clone git://code.quagga.net/quagga.git 下载到本地后，看一下说明文件。
4. 安装Quagga 第一步使用bootstrap.sh检查一下编译环境。 缺少那些工具或者lib都会有提示，按照提示配置完成。 第二步configure编译选项，这个步骤自动的，可以加参数配置，手册中说明很详细。 configure也用于修改软件的功能，如支持IPv6，关闭某个协议等等。 第三步make, make install，编译安装，OK。
5.运行Quagga 运行文件还是Zebra，不是Quagga，不要弄错了。有几个会出错的问题。 a. 如果遇到说zebra静态库找不到问题，可以将/usr/local/lib中的静态库cp到系统库中/lib快速解决，或者建立软链接，或者修改系统环境变量。 b.如果遇到说配置文件找不到(privs_init: could not lookup user quagga)。可以按如下操作，cp一个样例配置到配置中，再添加一下用户。
cp -Rf /usr/local/etc/zebra.conf.sample /usr/local/etc/zebra.conf zebra -d -u root -g root 然后再zebra就作为守护进程启动了。
6. 进入Quagga Zebra默认端口号2601，可以在/etc/services中修改，可以用telnet登陆，登陆密码是zebra。登陆后就可以使用了，如果你用过Cisco IOS，就不用我多说了，哈哈~~
root@donge:~/quagga# telnet localhost 2601 Trying 127.0.0.1&amp;hellip; Connected to localhost. Escape character is &amp;lsquo;^]&amp;rsquo;.
Hello, this is Quagga (version 0.</description>
      
    </item>
    
    <item>
      <title>[ZT]对下一代高端通信系统设计的七个展望</title>
      <link>https://donge.org/posts/zt%E5%AF%B9%E4%B8%8B%E4%B8%80%E4%BB%A3%E9%AB%98%E7%AB%AF%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E7%9A%84%E4%B8%83%E4%B8%AA%E5%B1%95%E6%9C%9B/</link>
      <pubDate>Fri, 17 Jun 2011 00:13:59 +0000</pubDate>
      
      <guid>https://donge.org/posts/zt%E5%AF%B9%E4%B8%8B%E4%B8%80%E4%BB%A3%E9%AB%98%E7%AB%AF%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E7%9A%84%E4%B8%83%E4%B8%AA%E5%B1%95%E6%9C%9B/</guid>
      
        <description>转一篇陈首席的文章，慢慢理解一下~~
高端通信系统设计从来就是一个困难的话题。一个优秀的系统设计往往决定了其竞争力和相应的生命周期。
本文试图阐述笔者对下一代高端通信系统设计的一些展望。抛豆腐引砖块，其目的是通过读者的评论，使得美军，共军，国军，伪军等的知识和经验可以共享。使得Open Source的精神发扬光大。
1。 LDF Rule（Legacy Decides Future） 系统都是演变的，而非设计的。一个好的系统设计必须首先满足对历史系统，历史代码的演进路标。否则，就是在做Science，而非Engineering。这方面最大的挑战就是在哪个release去掉哪些历史遗留问题。改良的代价一定是小于革命。
在这个第一重要的法则里，要求的是系统设计师必须了解细节。需要能进能出［想歪了的同学请自己惩罚一下自己邪恶的心灵］。要的是能bottom up。然后在bottom up的基础上，进行top down的设计。缺一不可。只能bottom inside，是一个单纯的工程师；只能top through就是一个玩胶片的大忽悠。
2。 CDMD Convergence Rule （Control Plane，Data Plane，Management Plane and Debug Plane Convergence） 这个rule类似与我大宋气功中的一句经典法则：人身无处不丹田。啥意思呢？ 控制平面，数据平面，管理平面，调试平面都将是一个逻辑的概念，而非一个物理的实体，例如控制平面卡，数据平面卡。。。
上述的各个Plane都是你中有我，我中有你。［想歪了的同学请自己惩罚一下自己邪恶的心灵］。
在任何一个环节都需要有相应的逻辑部分。整体系统的任何一个平面是通过分布在系统各个环节中的子平面来共同构成的。
这方面最大的挑战是：系统架构师必须对分布式系统的设计非常过敏，sorry，敏感。
在分布式系统设计中，一个最重要的理论悖论是： 在分布式系统中，在任何时刻，在任何一个节点上，是无法知道当时的全局状态的。
这是啥意思呢？
就是，除了上帝，你在一个时刻点Ti，是不可能知道Ti时刻系统其他信息的。你能知道的信息只能是T（i＋Delta）。这个Delta就是通信开销所带来的。
大白话就是，杨小姐（杨贵妃），从理论上，Y从来就没有吃过新鲜的荔枝，no matter驿道上的马儿跑的有多快。
在这个分布式天生的死穴问题上，带来的问题是最多的。
作为系统架构师，必须对时序逻辑（Temporal Logic）有所掌握。Otherwise, 系统设计一定是漏洞十出。
另外，分布式系统的nature决定了任何全局算法的优化一定不是最优的，而是次优的。 在CDMD Convergence的设计基础上，一个很大的演变就是：C，D，M，D的计算资源的自适应（Adaptive）的调配。而非静态的划分。
要充分利用计算池的模型，Processing on Demand。
3。CTP（Close To Port） Rule 计算或者存储能力一定要离端口（Port）近。越远，越歇火。 当官是要离党中央近。做系统是要离Traffic近。
这里的一个设计Case study 是：要充分利用系统中线卡，处理卡，I/O卡上的计算能力。这些计算能力是离端口最近的，对Traffic而言，是Local Bus的距离，而非Interconnect的长途跋涉。
计算是分布的。分布计算的集合就是系统的总体计算和（或）处理能力。
4。 CCNUMA Adoption Rule CCNUMA一定会被广泛的用在将来的高端通信系统中。
只有CCNUMA的应用，才能达到分布式技术的同时，又能支持历史系统，CDMD的融合和Close to Port的法则。
在CCNUMA系统设计中，必须对Memory的分布非常敏感。跨Interconnect，例如QPI，的过分存取，一定是带来硬伤。
系统架构师必须对Cache，L1，L2，和L3和ccNUMA－Interconnect，例如QPI等一些知识有足够的积累和实战能力。否则，很难把握CCNUMA系统。</description>
      
    </item>
    
    <item>
      <title>FW: OSPF NSSA白皮书</title>
      <link>https://donge.org/posts/nssa/</link>
      <pubDate>Tue, 15 Mar 2011 15:49:39 +0000</pubDate>
      
      <guid>https://donge.org/posts/nssa/</guid>
      
        <description>NSSA原理简介
众所周知，OSPF路由协议是目前因特网中应用最为广泛一种IGP，而NSSA则是在该协议发展过程中产生的一种新的属性，她的英文全称是&amp;quot;not-so-stubby&amp;quot; area，一个充满了幽默味道的名字。要想了解该属性的特征，我们先从路由协议的发展历程讲起。
1.2 从D-V算法到链路状态算法
RIP作为最古老的动态路由协议，使用D-V算法来计算路由。由于当时的网络环境非常简单，所以RIP协议的设计思想也是简洁为本，只求完成最基本的功能。这样在RIP应用于大型拓扑复杂的网络时，就会出现效率不高、收敛慢、路由自环等问题。其中尤以路由自环的危害最大。此时必须有新的路由协议来适应日益复杂的网络，而且新的路由协议必须要解决RIP遇到的所有问题。由于D-V算法对网络的理解是基于“平面的”——在运行RIP协议的路由器眼中，网络仅仅是由一个个直连的邻居和一条条由邻居通告的路由组成。这样在网络拓扑变化时难免会导致计算错误，产生自环。为了彻底解决这个问题，一种全新的算法——链路状态算法应运而生。该算法从“立体”的角度来看待网络，每一台路由器都理解全局网络的拓扑结构，并依据此来计算路由，由于每台路由器对网络的整体情况“一切尽在掌握”，所以自环的问题被这彻底的解决。
1.3 OSPF协议与区域
基于链路状态算法的OSPF协议虽然彻底的解决了路由自环问题，但这种算法本身也有很多固有的缺陷：
耗费更多内存资源：每台路由器都必须保存整个网络的拓扑结构（以LSDB的形态）
耗费更多CPU资源：该算法的路由计算使用SPF算法，较D-V算法要复杂的多。
计算更为频繁：只要网络中有任何一台路由器的拓扑发生变化，就会导致网络中所有的路由器进行SPF计算，而且每台路由器都是将SPF算法重新执行一遍，以便找出变化的路由。
而且，无论是D-V算法还是链路状态的路由协议都存在如下缺陷：
没有从协议本身反映出网络的层次结构。因为实际应用中的一个网络是由各种级别的路由器组成的，有核心层的骨干路由器、汇聚层的高端路由器、接入层的低端路由器。这些路由器承担的任务不同，处理性能也不一样。但在路由协议中，所有的路由器都要完成几乎是相同的工作：发送已知的路由给邻居路由器，根据从邻居路由器获得的路由信息计算本地路由表。虽然每台路由器的接口数量不同，但最终计算得来的路由表的规模基本是一样的。
为了彻底解决上述问题，OSPF提出了区域的概念（AREA），区域是将所有运行OSPF 的路由器人为的分成不同的组，以区域ID来标示。在区域内路由计算的方法不变，由于划分区域之后，每个区域内的路由器不会很多，所有上述缺陷表现得并不严重，带来的后果可以忽略不计。而在区域之间计算路由时采用D-V算法，这样三个缺点就被成功的规避了。实际上区域概念的提出意义远不只这些，在划分为区域之后：
网络的拓扑结构就与路由协议之间存在了一种对应关系，核心和高端的路由器由于处理能力强，可以规划在骨干区域之中。因为骨干区域的路由器要承担更多的路由计算任务。
每个单独的区域实际上就是一个独立于网络中其他区域的系统，可以在不同的区域中试行不同的路由策略，使组网规划更为灵活方便。
实际上OSPF 协议在当今的网络中广为流行，不是因为她使用了无环路的链路状态算法，而是因为她提出了区域的概念！
1.4 STUB区域
STUB区域就是一个对区域概念的最典型的应用。STUB区域的设计思想在于：在划分了区域之后，非骨干区域中的路由器对于区域外的路由，一定要通过ABR（区域边界路由器）来转发，或者说对于区域内的路由器来说ABR是一个通往外部世界的必经之路。既然如此，对于区域内的路由器来说，就没有必要知道通往外部世界的详细的路由了，代之以由ABR向该区域发布一条缺省路由来指导报文的发送。这样在区域内的路由器中就只有为数不多的区域内路由和一条指向ABR的缺省路由。而且无论区域外的路由如何变化，都不会影响到区域内路由器的路由表。由于区域内的路由器通常是由一些处理能力有限的低端路由器组成，所以处于STUB区域内的这些低端设备既不需要保存庞大的路由表，也不需要经常性的进行路由计算。有了STUB属性之后，网络的规划更符合实际的设备特点。
以上描述的只是STUB区域的设计思想，在协议文本中，对STUB区域的精确定义是：STUB区域一定是非骨干区域和非转换区域（可以配置虚连接的区域），并且在该区域中不可传递Type 5类型的LSA。 因为协议的设计者认为路由表中的绝大部分路由均是来自自治系统外部的引入的路由。（由于OSPF是链路状态算法的路由协议，LSA就是用来描述网络拓扑结构的一种数据结构。在OSPF 中将LSA分为5类：type1、2两种用来描述区域内的路由信息；type3用来描述区域间的路由信息；type4、5用来描述自治系统外部的路由信息。）OSPF链路状态公布LSA类型5定义了到达外部网络的路由，它并不泛洪到STUB区域。连接到STUB区域的ABR为外部网络发送一个缺省路由（0.0.0.0）到STUB区域。这允许STUB区域
内部的某个路由器将报文转发到一个目的网络，而该网络并没有出现在s t u b区域路由器的路由表中。对于那些在自己的路由表中没有找到的网络报文， s t u b区域路由器将其转发到ABR路由器，而该ABR路由器已发送0.0.0.0 LSA
需要注意的是定义中对于过滤TYPE5类型的LSA使用的描述语言是“不可传递”，这就意味着不仅区域外的ASE（自治系统外部）路由无法传递到STUB 区域中，同时STUB区域内部的ASE路由也无法传递到本区域之外。换一句更通俗的话来描述：STUB区域内的路由器都不可引入任何外部的路由（包括静态路由）。
这样的定义未免太过严厉了。因为在实际的组网中，并不是所有的设备都会运行OSPF协议。例如：用户拨号上网时使用的接入服务器就需要连接路由器上因特网，但通常接入服务器上并不支持（也不需要）OSPF协议，而是通过配置静态路由实现路由功能。很多时候ISP为了保密或易于管理的需要，在连接用户侧的路由器时使用静态路由。总之：在一个网络中所有的路由器上都配置OSPF，而不使用静态路由的情况几乎是不存在的。——也就是说STUB区域的适用条件也是不存在的。
1.5 NSSA区域
STUB区域虽然为合理的规划网络描绘了美好的前景，但她在实际的组网中又不具备可操作性，未免遗憾。但此时的OSPF协议已经基本成型，不可能再做大的修改。为了弥补缺陷，协议设计者提出了一种新的概念NSSA，并且作为OSPF协议的一种扩展属性单独在RFC 1587中描述。
NSSA需要完成如下任务：
自治系统外的ASE路由不可以进入到NSSA区域中，但是NSSA区域内的路由器引入的ASE路由可以在NSSA中传播并发送到区域之外。即：取消了STUB关于ASE的双向传播的限制（区域外的进不来，区域里的也出不去），改为单向限制（区域外的进不来，区域里的能出去）。
由于是作为OSPF标准协议的一种扩展属性，应尽量减少与不支持该属性的路由器协调工作时的冲突和兼容性问题。
为了解决ASE单向传递的问题，NSSA中重新定义了一种LSA——Type 7类型的LSA，作为区域内的路由器引入外部路由时使用，该类型的LSA除了类型标识与Type 5不相同之外，其它内容基本一样。这样区域内的路由器就可以通过LSA的类型来判断是否该路由来自本区域内。但由于Type 7类的LSA是新定义的，对于不支持NSSA属性的路由器无法识别，所以协议规定：在NSSA的ABR上将NSSA内部产生的Type 7类型的LSA转化为Type 5类型的LSA再发布出去，并同时更改LSA的发布者为ABR自己。这样NSSA区域外的路由器就可以完全不用支持该属性。
从上述描述可以看出：在NSSA区域内的所有路由器必须支持该属性（包括NSSA的ABR），而自治系统中的其他路由器则不需要。
由于NSSA是由STUB区域的概念改进得来，所以她的名字叫做： &amp;ldquo;not-so-stubby&amp;rdquo; area ，本意是：不是那么STUB的区域。
第2章 NSSA相关配置
NSSA的原理不复杂，配置更简单，相关命令只有一条：
[Router-ospf]
area area-id nssa [ default-route-advertise ] [ no-import-route ] [ no-summary ]</description>
      
    </item>
    
  </channel>
</rss>